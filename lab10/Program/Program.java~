ass Node {
    int key, height;
        Node left, right;
	 
	     Node(int k) 
	         {
		         key = k;
			         height = 1;
				     }
				     }
				      
				      class AVLTree {
				       
				           Node root;
					      
					          int height(Node N) {
						          if (N == null)
							              return 0;
								       
								               return N.height;
									           }
										    
										        int maxHeight(int a, int b) {
											        
												        if (a>b)
													          return a;
														          else
															            return b;

																        }
																	 
																	     
																	         int balanceFactor(Node N) 
																		     {
																		             if (N == null)
																			                 return 0;
																					  
																					          return height(N.left) - height(N.right);
																						      }
																						       
																						         Node rightRotate(Node y) {
																							         Node x = y.left;
																								         Node T2 = x.right;
																									  
																									      
																									              x.right = y;
																										              y.left = T2;
																											       
																											               y.height = maxHeight(height(y.left), height(y.right)) + 1;
																												               x.height = maxHeight(height(x.left), height(x.right)) + 1;
																													        

																														        return x;
																															    }
																															     

																															         Node leftRotate(Node x) {
																																         Node y = x.right;
																																	         Node T2 = y.left;
																																		  

																																		          y.left = x;
																																			          x.right = T2;
																																				   

																																				           x.height = maxHeight(height(x.left), height(x.right)) + 1;
																																					           y.height = maxHeight(height(y.left), height(y.right)) + 1;
																																						    

																																						            return y;
																																							        }
																																								 

																																								     Node insert(Node node, int key) {
																																								      
																																								              if (node == null)
																																									                  return (new Node(key));
																																											   
																																											           if (key < node.key)
																																												               node.left = insert(node.left, key);

																																													               else if (key > node.key)
																																														                   node.right = insert(node.right, key);

																																																           else 
																																																	               return node;

																																																		               node.height = 1 + maxHeight(height(node.left),height(node.right));
																																																			               
																																																				               return balance(node,key);

																																																					               }

																																																						             Node balance(Node node,int key){

																																																							             int balance = balanceFactor(node);
																																																								      
																																																								              
																																																									              if (balance > 1 && key < node.left.key)
																																																										                  return rightRotate(node);
																																																												   
																																																												           if (balance < -1 && key > node.right.key)
																																																													               return leftRotate(node);
																																																														        
																																																															        if (balance > 1 && key > node.left.key) {
																																																																            node.left = leftRotate(node.left);
																																																																	                return rightRotate(node);
																																																																			        }
																																																																				 
																																																																				        
																																																																					        if (balance < -1 && key < node.right.key) {
																																																																						            node.right = rightRotate(node.right);
																																																																							                return leftRotate(node);
																																																																									        }
																																																																										 
																																																																										     
																																																																										             return node;
																																																																											         }
																																																																												       
																																																																												             void preOrder(Node node) {
																																																																													             if (node != null) 
																																																																														             {
																																																																															                 System.out.print(node.key + " ");
																																																																																	             preOrder(node.left);
																																																																																		                 preOrder(node.right);
																																																																																				         }
																																																																																					     }

																																																																																					     }

																																																																																					     class Program
																																																																																					     {
																																																																																					         public static void main(String[] args)
																																																																																						     {
																																																																																						             AVLTree T = new AVLTree();

																																																																																							             T.root = T.insert(T.root, 1);
																																																																																								             T.root = T.insert(T.root, 2);
																																																																																									             T.root = T.insert(T.root, 2);
																																																																																										             T.root = T.insert(T.root, 4);
																																																																																											             T.root = T.insert(T.root, 5);
																																																																																												             T.root = T.insert(T.root, 10);
																																																																																													             T.root = T.insert(T.root, 9);
																																																																																														             T.root = T.insert(T.root, 8);
																																																																																															             T.root = T.insert(T.root, 7);
																																																																																																             T.root = T.insert(T.root, 6);


																																																																																																	             System.out.println("Preorder : ");
																																																																																																		             T.preOrder(T.root);
																																																																																																			         }
																																																																																																				 }

